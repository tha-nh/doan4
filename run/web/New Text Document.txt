import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { useParams, useNavigate } from 'react-router-dom';
import Sidebar from './Sidebar';
import FeedbackListWithReply from './FeedbackListWithReply';
import './AppointmentDetailPage.css';

const AppointmentDetailPageC1 = () => {
    const { appointmentId } = useParams();
    const [appointment, setAppointment] = useState(null);
    const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false);
    const [departmentData, setDepartmentData] = useState({});
    const navigate = useNavigate();

    useEffect(() => {
        const fetchAppointmentDetails = async () => {
            try {
                const response = await axios.get(`http://localhost:8081/api/v1/appointments/${appointmentId}`);
                setAppointment(response.data);

                // Fetch department data for the first doctor
                if (response.data?.doctor?.[0]?.department_id) {
                    const deptResponse = await axios.get(`http://localhost:8081/api/v1/departments/search?department_id=${response.data.doctor[0].department_id}`);
                    setDepartmentData(deptResponse.data[0] || {});
                }
            } catch (error) {
                console.error('Error fetching appointment details', error);
            }
        };
        fetchAppointmentDetails();
    }, [appointmentId]);

    const handleBack = () => {
        navigate('/appointments');
    };

    const handleOpenFeedbackModal = () => {
        setIsFeedbackModalOpen(true);
    };

    const handleCloseFeedbackModal = () => {
        setIsFeedbackModalOpen(false);
    };

    const getTimeFromSlot = (slot) => {
        const slotToTime = {
            1: "08:00 - 09:00",
            2: "09:00 - 10:00",
            3: "10:00 - 11:00",
            4: "11:00 - 12:00",
            5: "13:00 - 14:00",
            6: "14:00 - 15:00",
            7: "15:00 - 16:00",
            8: "16:00 - 17:00"
        };
        return slotToTime[slot] || "Unknown Time";
    };

    const getStatusClass = (status) => {
        switch (status?.toLowerCase()) {
            case 'completed':
                return 'status-completedC1';
            case 'pending':
                return 'status-pendingC1';
            case 'cancelled':
                return 'status-cancelledC1';
            case 'missed':
                return 'status-missedC1';
            default:
                return '';
        }
    };

    const getPatientInitials = (name) => {
        if (!name) return 'PA';
        const nameParts = name.split(' ');
        return nameParts.length > 1 
            ? (nameParts[0][0] + nameParts[nameParts.length - 1][0]).toUpperCase()
            : name.substring(0, 2).toUpperCase();
    };

    const formatDate = (dateString) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('en-US', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    return (
        <div className="appointment-detail-pageC1">
            <Sidebar
                onInboxClick={handleOpenFeedbackModal}
                handleOpenDoctorsPage={() => navigate('/doctors')}
                handleOpenPatientsPage={() => navigate('/patients')}
                handleOpenAppointmentsPage={() => navigate('/appointments')}
                handleOpenStaffPage={() => navigate('/staff')}
                className="sidebarC1"
            />
            <div className="contentC1">
                <div className="headerC1">
                    <h2>Appointment Detail</h2>
                    <button className="back-buttonC1" onClick={handleBack}>
                       Appointments List
                    </button>
                </div>

                {appointment ? (
                    <div className="appointment-profileC1">
                        {/* Profile Header */}
                        <div className="profile-headerC1">
                             <div className="profile-avatarC1">
                                {appointment.patient?.[0]?.patient_img ? (
                                    <img
                                        src={appointment.patient[0].patient_img}
                                        alt={appointment.patient[0].patient_name || 'Patient Image'}
                                        style={{ width: '110px', height: '110px', objectFit: 'cover', borderRadius: '60px' }}
                                    />
                                ) : (
                                    getPatientInitials(appointment.patient?.[0]?.patient_name)
                                )}
                            </div>
                            <div className="profile-infoC1">
                                <h1>{appointment.patient?.[0]?.patient_name || 'Unknown Patient'}</h1>
                                <div className="appointment-idC1">
                                    Appointment ID: 191105{appointment.appointment_id}
                                </div>
                                <div className={`profile-statusC1 ${getStatusClass(appointment.status)}`}>
                                    {appointment.status}
                                </div>
                            </div>
                        </div>
 
                        <div className="info-cardC1">
                            <div className="card-headerC1">
                                <div className="card-iconC1">üë§</div>
                                <h3>Patient Information</h3>
                            </div>
                            <div className="card-contentC1">
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Full Name</div>
                                    <div className="info-valueC1">{appointment.patient?.[0]?.patient_name || 'Not provided'}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Email</div>
                                    <div className="info-valueC1">{appointment.patient?.[0]?.patient_email || 'Not provided'}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Phone</div>
                                    <div className="info-valueC1">{appointment.patient?.[0]?.patient_phone || 'Not provided'}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Address</div>
                                    <div className="info-valueC1">{appointment.patient?.[0]?.patient_address || 'Not provided'}</div>
                                </div>
                            </div>
                        </div>
                        {/* Appointment Details */}
                        <div className="info-cardC1">
                            <div className="card-headerC1">
                                <div className="card-iconC1">üìÖ</div>
                                <h3>Appointment Details</h3>
                            </div>
                            <div className="card-contentC1">
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Date</div>
                                    <div className="info-valueC1">{formatDate(appointment.medical_day)}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Time</div>
                                    <div className="info-valueC1">{getTimeFromSlot(appointment.slot)}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Status</div>
                                    <div className="info-valueC1">
                                        <span className={`profile-statusC1 ${getStatusClass(appointment.status)}`}>
                                            {appointment.status}
                                        </span>
                                    </div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Price</div>
                                    <div className="info-valueC1">
                                        <span className="price-highlightC1">
                                            ${appointment.price}
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {/* Medical Information */}
                        <div className="info-cardC1">
                            <div className="card-headerC1">
                                <div className="card-iconC1">‚öïÔ∏è</div>
                                <h3>Medical Information</h3>
                            </div>
                            <div className="card-contentC1">
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Department</div>
                                    <div className="info-valueC1">{departmentData.department_name || 'Not specified'}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Doctor</div>
                                    <div className="info-valueC1">{appointment.doctor?.[0]?.doctor_name || 'Not assigned'}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Specialization</div>
                                    <div className="info-valueC1">{departmentData.department_name || 'General'}</div>
                                </div>
                            </div>
                        </div>

                        {/* Additional Information */}
                        <div className="info-cardC1">
                            <div className="card-headerC1">
                                <div className="card-iconC1">üìã</div>
                                <h3>Additional Information</h3>
                            </div>
                            <div className="card-contentC1">
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Created</div>
                                    <div className="info-valueC1">{formatDate(appointment.medical_day)}</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Appointment Type</div>
                                    <div className="info-valueC1">Regular Consultation</div>
                                </div>
                                <div className="info-itemC1">
                                    <div className="info-labelC1">Notes</div>
                                    <div className="info-valueC1">No additional notes</div>
                                </div>
                            </div>
                        </div>
                    </div>
                ) : (
                    <div className="loading-stateC1">
                        <p>Loading appointment details...</p>
                    </div>
                )}

                {isFeedbackModalOpen && (
                    <div className="feedback-modalC1">
                        <div className="overlay-contentC1">
                            <button onClick={handleCloseFeedbackModal} className="close-buttonC1">√ó</button>
                            <FeedbackListWithReply onClose={handleCloseFeedbackModal} />
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AppointmentDetailPageC1;
/* Reset default styles and ensure full-screen layout */
html, body, #root {
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
    display: flex;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Color Variables */
:root {
    --primary-blue: #1e40af;
    --secondary-blue: #3b82f6;
    --accent-blue: #60a5fa;
    --white: #ffffff;
    --gray-50: #f8fafc;
    --gray-100: #f1f5f9;
    --gray-200: #e2e8f0;
    --gray-300: #cbd5e1;
    --gray-400: #94a3b8;
    --gray-500: #64748b;
    --gray-600: #475569;
    --gray-700: #334155;
    --gray-800: #1e293b;
    --gray-900: #0f172a;
    --success: #10b981;
    --warning: #f59e0b;
    --error: #ef4444;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* Main container for AppointmentDetailPage */
.appointment-detail-pageC1 {
    display: flex;
    height: 100%;
    width: 100%;
    overflow: hidden;
}

/* Sidebar styling */
.sidebarC1 {
    width: 280px;
    flex-shrink: 0;
    height: 100vh;
    background-color: var(--white);
    box-shadow: var(--shadow-lg);
    overflow-y: auto;
    transition: width 0.3s ease, transform 0.3s ease;
    border-right: 1px solid var(--gray-200);
}

/* Content container */
.contentC1 {
    flex: 1;
    padding: 32px;
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: 32px;
    height: 90vh;
}

/* Header styling */
.headerC1 {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 16px;
    flex-wrap: wrap;
    margin-bottom: 8px;
}

.headerC1 h2 {
    color: #004B91;
    font-weight: 700;
    font-size: 32px;
    margin: 0;
    text-shadow: 0 2px 4px rgba(30, 64, 175, 0.1);
}

/* Back button */
.back-buttonC1 {
    padding: 12px 24px;
    background-color: #1e3a8a;
    color: #ffffff;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 20px;
}


.back-buttonC1:hover {
    background-color: #294eae;
    color:  #ffffff;
}

/* Appointment Profile Container */
.appointment-profileC1 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 32px;
    margin-bottom: 32px;
}

/* Profile Header Card */
.profile-headerC1 {
    grid-column: 1 / -1;
    background: #004B91;
    color: var(--white);
    padding: 40px;
    border-radius: 20px;
    box-shadow: var(--shadow-xl);
    display: flex;
    align-items: center;
    gap: 32px;
    position: relative;
}

.profile-infoC1 {
    flex: 1;
    position: relative;
    z-index: 2;
}

.profile-infoC1 h1 {
    font-size: 36px;
    font-weight: 700;
    margin: 0 0 8px 0;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.profile-infoC1 .appointment-idC1 {
    font-size: 18px;
    opacity: 0.9;
    margin-bottom: 16px;
}

.profile-statusC1 {
    display: inline-block;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
    Color: #ffffff
}

/* Info Cards */
.info-cardC1 {
    background: var(--white);
    border-radius: 20px;
    padding: 32px;
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--gray-200);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
}

.card-headerC1 {
    display: flex;
    align-items: center;
    gap: 115px;
    margin-bottom: 24px;
}

.card-iconC1 {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    background: #004B91;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--white);
    font-size: 24px;
}

.card-headerC1 h3 {
    color: #004B91;
    font-size: 24px;
    font-weight: 700;
    margin: 0;
}

.card-contentC1 {
    display: flex;
    flex-direction: column;
    gap: 16px;
}

.info-itemC1 {
    display: flex;
    align-items: center;
    gap: 90px;
    padding: 12px 0;
    border-bottom: 1px solid var(--gray-100);
}

.info-itemC1:last-child {
    border-bottom: none;
}

.info-labelC1 {
    font-weight: 600;
    color: var(--gray-600);
    min-width: 120px;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.info-valueC1 {
    color: var(--gray-800);
    font-size: 16px;
    font-weight: 500;
    flex: 1;
}

/* Special styling for different status */
.status-completedC1 {
    background:  #059669 ;
}

.status-pendingC1 {
    background:  #611bb6ff ;
}

.status-cancelledC1 {
    background:  #dc2626;
}
.status-missedC1 {
    background:  #FFFF00 ;
}

/* Price highlight */
.price-highlightC1 {
    font-size: 20px;
    font-weight: 700;
    padding: 8px 16px;
    border-radius: 12px;
}

/* Feedback modal */
.feedback-modalC1 {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000;
    animation: fadeIn 0.4s ease;
    backdrop-filter: blur(8px);
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

.overlay-contentC1 {
    background: var(--white);
    padding: 40px;
    border-radius: 24px;
    width: 90%;
    max-width: 900px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: var(--shadow-xl);
    animation: slideUp 0.4s ease;
    border: 1px solid var(--gray-200);
}

@keyframes slideUp {
    from { transform: translateY(30px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

.close-buttonC1 {
    position: absolute;
    top: 20px;
    right: 20px;
    background: var(--error);
    color: var(--white);
    border: none;
    border-radius: 12px;
    width: 44px;
    height: 44px;
    cursor: pointer;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-md);
}



/* Loading state */
.loading-stateC1 {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 400px;
    background: var(--white);
    border-radius: 20px;
    box-shadow: var(--shadow-lg);
}

.loading-stateC1 p {
    color: var(--gray-600);
    font-size: 18px;
    font-weight: 500;
}

/* Responsive adjustments */
@media (max-width: 1024px) {
    .appointment-profileC1 {
        grid-template-columns: 1fr;
        gap: 24px;
    }
    
    .profile-headerC1 {
        flex-direction: column;
        text-align: center;
        padding: 32px;
    }
    
    .profile-avatarC1 {
        width: 100px;
        height: 100px;
        font-size: 40px;
    }
    
    .profile-infoC1 h1 {
        font-size: 28px;
    }
}

@media (max-width: 768px) {
    .sidebarC1 {
        width: 80px;
    }

    .contentC1 {
        padding: 24px;
        gap: 24px;
    }

    .headerC1 {
        flex-direction: column;
        align-items: flex-start;
        gap: 16px;
    }

    .headerC1 h2 {
        font-size: 28px;
    }

    .back-buttonC1 {
        width: 100%;
        justify-content: center;
    }

    .info-cardC1 {
        padding: 24px;
    }

    .card-headerC1 h3 {
        font-size: 20px;
    }

    .overlay-contentC1 {
        width: 95%;
        padding: 24px;
    }
}

@media (max-width: 480px) {
    .contentC1 {
        padding: 16px;
    }

    .profile-headerC1 {
        padding: 24px;
    }

    .profile-avatarC1 {
        width: 80px;
        height: 80px;
        font-size: 32px;
    }

    .profile-infoC1 h1 {
        font-size: 24px;
    }

    .info-cardC1 {
        padding: 20px;
    }

    .info-itemC1 {
        flex-direction: column;
        align-items: flex-start;
        gap: 8px;
    }

    .info-labelC1 {
        min-width: auto;
    }
}